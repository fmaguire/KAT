//  ********************************************************************
//  This file is part of KAT - the K-mer Analysis Toolkit.
//
//  KAT is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  KAT is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with KAT.  If not, see <http://www.gnu.org/licenses/>.
//  *******************************************************************

#pragma once

#include <getopt.h>
#include <string.h>
#include <iostream>
#include <stdint.h>
#include <vector>
#include <str_utils.hpp>

#include "../common_plot_args.hpp"
#include <str_utils.hpp>

using std::vector;
using std::string;
using std::cout;
using std::cerr;
using std::endl;
using std::ostringstream;

namespace kat
{
    const bool DEFAULT_INTERSECTION = false;
    const uint16_t DEFAULT_EXC_CUTOFF_D1 = 1;
    const uint16_t DEFAULT_EXC_CUTOFF_D2 = 1;
    const uint32_t DEFAULT_X_MIN = 0;
    const uint32_t DEFAULT_Y_MIN = 0;
    const uint32_t DEFAULT_X_MAX = 1000;
    const uint64_t DEFAULT_Y_MAX = 1000000;
    const bool DEFAULT_X_LOGSCALE = false;
    const bool DEFAULT_Y_LOGSCALE = false;

    const uint16_t MIN_ARGS = 1;

    class SpectraMxPlotArgs : public BasePlotArgs
    {
    private:

        bool        x_max_mod;
        bool        y_max_mod;

        void init()
        {
            title = defaultTitle();
            x_label = defaultXLabel();
            y_label = defaultYLabel();
            width = defaultWidth();
            height = defaultHeight();

            x_max_mod = false;
            y_max_mod = false;
        }

    protected:


        // ***********************************************
        // These methods override BaseArgs virtual methods

        const string usage() const
        {
            return "Usage: kat plot spectra-mx [options] {--list <comma_seperated_list> | --intersection} <mx_file>";
        }

        const string shortDescription() const
        {
            return "Creates K-mer Spectra Plot from selected rows and/or columns in a \"comp\" matrix.";
        }

        const string longDescription() const
        {
            string long_desc = "Produces K-mer spectras from rows or columns in a matrix generated by \"kat comp\".  This tool is " \
                   "designed to plot line graphs for one or more histograms, each histogram being represented by a single row or column "
                   "in the matrix. </br> "
                   "This tool also has a special mode for showing shared and exclusive content between two different samples. This mode "
                   "takes the first row and column of the matrix representing content which is found exclusively in "
                   "each sample.  Two more lines are plotting, one which has each following row summed, and the other that has "
                   "each following column summed.  These two plots represent the shared content for each sample.  This mode can "
                   "be activated using the \"--intersection\" flag. </br> "
                   "Alternatively, you can select specific rows and columns from the matrix using a comma seperated list "
                   "identified with the \"--list\" option.  Each element in the list should start with either a 'c' or a 'r' "
                   "indicating whether or not the column or row is requested.  Then the element should contain a number "
                   "indicating which column or row to select.  For example: \"--list c0,r1\" will select column 0 and row 1. "
                   "Note: spaces are not tolerated in this list.";

            return lineBreakString(long_desc, 78, "  ");
        }

        const string optionsDescription() const
        {
            ostringstream help_str;

            help_str << BasePlotArgs::optionsDescription() << endl
                     << " -n  --intersection          Activate intersection mode, which plots the shared and exclusive" << endl
                     << "                             content found in the matrix (" << DEFAULT_INTERSECTION << ")." << endl
                     << " -c  --list                  The list of columns or rows to select from the matrix.  Note that this" << endl
                     << "                             option will override \"--intersection\" if that was also selected." << endl
                     << " -e  --exc_cutoff_d1=uint16  If in \"--intersection\" mode, this enables you to alter the level at" << endl
                     << "                             which content for dataset 1 is considered exclusive or shared (" << DEFAULT_EXC_CUTOFF_D1 << ")." << endl
                     << " -f  --exc_cutoff_d2=uint16  If in \"--intersection\" mode, this enables you to alter the level at" << endl
                     << "                             which content for dataset 2 is considered exclusive or shared (" << DEFAULT_EXC_CUTOFF_D2 << ")." << endl
                     << " -r  --x_min=uint32          Minimum value for the x-axis (" << DEFAULT_X_MIN << ")" << endl
                     << " -s  --y_min=uint32          Minimum value for the y-axis (" << DEFAULT_Y_MIN << ")" << endl
                     << " -x  --x_max=uint32          Maximum value for the x-axis (" << DEFAULT_X_MAX << ")" << endl
                     << " -y  --y_max=uint32          Maximum value for the y-axis (Auto calculate \'--y_max\' from data)" << endl
                     << " -l  --x_logscale            X-axis is logscale.  This overrides the x_min and x_max limits." << endl
                     << " -m  --y_logscale            Y-axis is logscale.  This overrides the y_min and y_max limits.";

            return help_str.str();
        }

        vector<option>* longOptions()
        {
            static struct option long_options_array[] =
            {
                {"intersection",    no_argument,        0, 'n'},
                {"list",            required_argument,  0, 'c'},
                {"exc_cutoff_d1",   required_argument,  0, 'e'},
                {"exc_cutoff_d2",   required_argument,  0, 'f'},
                {"x_min",           required_argument,  0, 'r'},
                {"y_min",           required_argument,  0, 's'},
                {"x_max",           required_argument,  0, 'x'},
                {"y_max",           required_argument,  0, 'y'},
                {"x_logscale",      no_argument,        0, 'l'},
                {"y_logscale",      no_argument,        0, 'm'}
            };

            vector<option>* long_options = BasePlotArgs::longOptions();

            for(uint8_t i = 0; i < 10; i++)
            {
                long_options->push_back(long_options_array[i]);
            }

            return long_options;
        }

        string shortOptions()
        {
            return BasePlotArgs::shortOptions() + "nc:e:f:r:s:x:y:lm";
        }

        void setOption(int c, string& option_arg) {

            BasePlotArgs::setOption(c, option_arg);

            switch(c)
            {
            case 'n':
                intersection_mode = true;
                break;
            case 'c':
                list = string(option_arg);
                break;
            case 'e':
                exc_cutoff_d1 = strToInt16(option_arg);
                break;
            case 'f':
                exc_cutoff_d2 = strToInt16(option_arg);
                break;
            case 'r':
                x_min = strToInt32(option_arg);
                break;
            case 's':
                y_min = strToInt32(option_arg);
                break;
            case 'x':
                x_max = strToInt32(option_arg);
                x_max_mod = true;
                break;
            case 'y':
                y_max = strToInt64(option_arg);
                y_max_mod = true;
                break;
            case 'l':
                x_logscale = true;
                break;
            case 'm':
                y_logscale = true;
                break;
            }
        }


        void processRemainingArgs(const vector<string>& remaining_args)
        {
            mx_path = remaining_args[0];
        }



        const string currentStatus() const
        {
            ostringstream status;

            status  << BasePlotArgs::currentStatus()
                    << "Intersection mode activated: " << intersection_mode << endl
                    << "List: " << list << endl
                    << "Exclusive content cutoff for dataset 1: " << exc_cutoff_d1 << endl
                    << "Exclusive content cutoff for dataset 2: " << exc_cutoff_d2 << endl
                    << "X Min: " << x_min << endl
                    << "Y Min: " << y_min << endl
                    << "X Max: " << x_max << endl
                    << "Y Max: " << y_max << endl
                    << "X Logscale: " << x_logscale << endl
                    << "Y Logscale: " << y_logscale << endl;

            return status.str().c_str();
        }

    public:

        string      mx_path;
        bool        intersection_mode;
        string      list;
        uint16_t    exc_cutoff_d1;
        uint16_t    exc_cutoff_d2;
        uint32_t    x_min;
        uint32_t    y_min;
        uint32_t    x_max;
        uint64_t    y_max;
        bool        x_logscale;
        bool        y_logscale;

        // Default constructor
        SpectraMxPlotArgs() : BasePlotArgs(MIN_ARGS),
            mx_path(""),
            intersection_mode(DEFAULT_INTERSECTION), list(""), exc_cutoff_d1(DEFAULT_EXC_CUTOFF_D1), exc_cutoff_d2(DEFAULT_EXC_CUTOFF_D2),
            x_min(DEFAULT_X_MIN), y_min(DEFAULT_Y_MIN), x_max(DEFAULT_X_MAX), y_max(DEFAULT_Y_MAX),
            x_logscale(DEFAULT_X_LOGSCALE), y_logscale(DEFAULT_Y_LOGSCALE)
        {
            init();
        }

        // Constructor that parses command line options
        SpectraMxPlotArgs(int argc, char* argv[]) : BasePlotArgs(MIN_ARGS),
            mx_path(""),
            intersection_mode(DEFAULT_INTERSECTION), list(""), exc_cutoff_d1(DEFAULT_EXC_CUTOFF_D1), exc_cutoff_d2(DEFAULT_EXC_CUTOFF_D2),
            x_min(DEFAULT_X_MIN), y_min(DEFAULT_Y_MIN), x_max(DEFAULT_X_MAX), y_max(DEFAULT_Y_MAX),
            x_logscale(DEFAULT_X_LOGSCALE), y_logscale(DEFAULT_Y_LOGSCALE)
        {
            init();

            parse(argc, argv);
        }

        ~SpectraMxPlotArgs()
        {}

        // ***************************************************
        // These methods override BasePlotArgs virtual methods

        const string defaultOutputPrefix() const    { return "kat-plot-spectra-mx"; }
        const string defaultTitle() const           { return "K-mer Spectra"; }
        const string defaultXLabel() const          { return "K-mer Multiplicity"; }
        const string defaultYLabel() const          { return "Distinct K-mers"; }
        const uint16_t defaultWidth() const         { return 1024; }
        const uint16_t defaultHeight() const        { return 1024; }

        const bool xMaxModified()       {return x_max_mod;}
        const bool yMaxModified()       {return y_max_mod;}
    };
}
